/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/staging/spaceInvadersArcade/spaceInvadersArcade.glb --types --keepnames --weld  
Author: SINNIK (https://sketchfab.com/sinnik)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/arcade-game-space-invaders-d3959de1a78747f58fb46915e111a265
Title: Arcade Game - Space Invaders
*/

import { Mesh, MeshStandardMaterial } from 'three'
import { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Object_2: Mesh
    Object_3: Mesh
    Object_4: Mesh
    Object_5: Mesh
  }
  materials: {
    CR_videogame_door: MeshStandardMaterial
    CR_videogame_machine: MeshStandardMaterial
    CR_videogamecoins: MeshStandardMaterial
    CR_videogamedesign2: MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

const FILE_URL = "https://d1zhlm2vwhu5x.cloudfront.net/models/spaceInvadersArcade-1705650978/spaceInvadersArcade-transformed.glb.gz";

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
        <mesh name="Object_2" geometry={nodes.Object_2.geometry} material={materials.CR_videogame_door} />
        <mesh name="Object_3" geometry={nodes.Object_3.geometry} material={materials.CR_videogame_machine} />
        <mesh name="Object_4" geometry={nodes.Object_4.geometry} material={materials.CR_videogamecoins} />
        <mesh name="Object_5" geometry={nodes.Object_5.geometry} material={materials.CR_videogamedesign2} />
      </group>
    </group>
  )
}

useGLTF.preload(FILE_URL)
